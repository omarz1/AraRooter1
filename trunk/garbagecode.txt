›«ﬁŒ’ÂÏ· ·‘ﬁ·«‘·À «ÀﬁÀ
ya garbage

		// append to outs[] the class for each instance
//		String[] derivFeats = getCsvFeats(derivs);
//		for(int i=0; i<l; i++) {
//			//append "Class", to the header
//			String classLabel = ",Class\n";
//			if(!derivFeats[i].contains("length")) {
//				System.out.println("Warning.. feature csv files have no headers");
//			}
//			else {
//				derivFeats[i] = derivFeats[i].replace("\\n",classLabel); // for the first line of headers
//			}
//
//			int li=1; // line iterator. starts form 1 to skip the csv header. line 0 is processed out of the loop
//			String[] lines = derivFeats[i].split("\\n");
//			if(lines.length != roots.length+1) {//+1 because of the header
//				System.out.println("Error. something wrong not with the input but my processing.. with the number of lines in my roots and derivs arrays. I am expecting "+(roots.length+1)+" lines but found "+(lines.length-1));
//				System.exit(0);
//			}
//			outs[i].print(lines[0]+classLabel);
//			for(; li<lines.length; li++) { 
//				outs[i].print(lines[li].replace("unclassified",getInstanceClass(derivs[li-1],roots[li-1])[i]+"\n")); // for the rest of the file
//			}
//			outs[i].close();
//		}
		


/*
	// hardwired for feature extraction for all three classifiers from the training data.
	// featExtract() does the same for one string
	private static void featExtractFromTrainData() throws FileNotFoundException {
		Scanner S_noT = new Scanner(new File("triDeriv_shaddaUnfold_hamzaNorm_noT.txt"));
		Scanner S_root = new Scanner(new File("triRoots_HamzaNorm.txt"));
		Scanner S_onlyT = new Scanner(new File("triDeriv_onlyT.txt"));
		
		PrintWriter out1 = new PrintWriter(new File("feat1.csv"));
		PrintWriter out2 = new PrintWriter(new File("feat2.csv"));
		PrintWriter out3 = new PrintWriter(new File("feat3.csv"));

		out1.print("length,isLetter1InCorrespondingGroup,isLetter2InCorrespondingGroup,isLetter3InCorrespondingGroup,isLetter4InCorrespondingGroup,WhatLetter1Haraka,WhatLetter2Haraka,WhatLetter3Haraka,WhatLetter4Haraka,isLetter1Vowel,isLetter2Vowel,isLetter3Vowel,isLetter4Vowel,isLetter1Hamza,isLetter2Hamza,isLetter3Hamza,isLetter4Hamza,Class");
		out2.print("length,isLetter2InCorrespondingGroup,isLetter3InCorrespondingGroup,isLetter4InCorrespondingGroup,isLetter5InCorrespondingGroup,WhatLetter2Haraka,WhatLetter3Haraka,WhatLetter4Haraka,WhatLetter5Haraka,isLetter2Vowel,isLetter3Vowel,isLetter4Vowel,isLetter5Vowel,isLetter2Hamza,isLetter3Hamza,isLetter4Hamza,isLetter5Hamza,Class");
		out3.print("length,isLetter3InCorrespondingGroup,isLetter4InCorrespondingGroup,isLetter5InCorrespondingGroup,isLetter6InCorrespondingGroup,isLetter7InCorrespondingGroup,WhatLetter3Haraka,WhatLetter4Haraka,WhatLetter5Haraka,WhatLetter6Haraka,WhatLetter7Haraka,isLetter3Vowel,isLetter4Vowel,isLetter5Vowel,isLetter6Vowel,isLetter7Vowel,isLetter3Hamza,isLetter4Hamza,isLetter5Hamza,isLetter6Hamza,isLetter7Hamza,Class");
		
		// TODO: check that all three input files have the same num of lines.
		while(S_noT.hasNextLine()) {
			
			String noT = S_noT.nextLine();
			String root = S_root.nextLine();
			String T = S_onlyT.nextLine();
			out1.print(noT.length()+",");
			out1.print(isLetterInGroup(noT,1,1)+",");
			out1.print(isLetterInGroup(noT,2,2)+",");
			out1.print(isLetterInGroup(noT,3,3)+",");
			out1.print(isLetterInGroup(noT,4,4)+",");
			out1.print(WhatLetterHaraka(T,1)+",");
			out1.print(WhatLetterHaraka(T,2)+",");
			out1.print(WhatLetterHaraka(T,3)+",");
			out1.print(WhatLetterHaraka(T,4)+",");
			out1.print(isLetterVowel(noT,1)+",");
			out1.print(isLetterVowel(noT,2)+",");
			out1.print(isLetterVowel(noT,3)+",");
			out1.print(isLetterVowel(noT,4)+",");
			out1.print(isLetterHamza(noT,1)+",");
			out1.print(isLetterHamza(noT,2)+",");
			out1.print(isLetterHamza(noT,3)+",");
			out1.print(isLetterHamza(noT,4)+",");
			//class or label
			//out1.println(root.charAt(0));
			int pos = noT.indexOf(root.charAt(0)) + 1; 
			if (pos>4) pos=0;
			out1.println("pos"+pos); // use this if you need the class to be a string rather than  a number. Weka demands so.
			//out1.println(loc);

		
			out2.print(noT.length()+",");
			out2.print(isLetterInGroup(noT,2,2)+",");
			out2.print(isLetterInGroup(noT,3,3)+",");
			out2.print(isLetterInGroup(noT,4,4)+",");
			out2.print(isLetterInGroup(noT,5,5)+",");
			out2.print(WhatLetterHaraka(T,2)+",");
			out2.print(WhatLetterHaraka(T,3)+",");
			out2.print(WhatLetterHaraka(T,4)+",");
			out2.print(WhatLetterHaraka(T,5)+",");
			out2.print(isLetterVowel(noT,2)+",");
			out2.print(isLetterVowel(noT,3)+",");
			out2.print(isLetterVowel(noT,4)+",");
			out2.print(isLetterVowel(noT,5)+",");
			out2.print(isLetterHamza(noT,2)+",");
			out2.print(isLetterHamza(noT,3)+",");
			out2.print(isLetterHamza(noT,4)+",");
			out2.print(isLetterHamza(noT,5)+",");
			//class
			//out2.println(root.charAt(1)); 
			out2.println("pos"+locateLetter(root.charAt(1), noT, 1)); // use this if you need the class to be a string rather than  a number. Weka demands so.
			//out2.println(locateLetter(root.charAt(1), noT, 1)+1); // use this if you need the class to be a string rather than  a number. Weka demands so.
			//plus 1 for zero reserved for 'not found'
			
			
		
			out3.print(noT.length()+",");
			out3.print(isLetterInGroup(noT,3,3)+",");
			out3.print(isLetterInGroup(noT,4,4)+",");
			out3.print(isLetterInGroup(noT,5,5)+",");
			out3.print(isLetterInGroup(noT,6,6)+",");
			out3.print(isLetterInGroup(noT,7,7)+",");
			out3.print(WhatLetterHaraka(T,3)+",");
			out3.print(WhatLetterHaraka(T,4)+",");
			out3.print(WhatLetterHaraka(T,5)+",");
			out3.print(WhatLetterHaraka(T,6)+",");
			out3.print(WhatLetterHaraka(T,7)+",");
			out3.print(isLetterVowel(noT,3)+",");
			out3.print(isLetterVowel(noT,4)+",");
			out3.print(isLetterVowel(noT,5)+",");
			out3.print(isLetterVowel(noT,6)+",");
			out3.print(isLetterVowel(noT,7)+",");
			out3.print(isLetterHamza(noT,3)+",");
			out3.print(isLetterHamza(noT,4)+",");
			out3.print(isLetterHamza(noT,5)+",");
			out3.print(isLetterHamza(noT,6)+",");
			out3.print(isLetterHamza(noT,7)+",");
			//class
			//out3.println(root.charAt(2)); 
			out3.println("pos"+locateLetter(root.charAt(2), noT, 2)); // use this if you need the class to be a string rather than  a number. Weka demands so.
			//out3.println(locateLetter(root.charAt(2), noT, 2)+1); // use this if you need the class to be a string rather than  a number. Weka demands so.
			//plus 1; for zero reserved for 'not found'
			
		}
		out1.close();
		out2.close();
		out3.close();
		System.out.println("Feats Extrctd for training data");
	}
//*/
	// insert the class column at the end of each feature vector
	private static String[] appendClassToFeatVs(String[] featVs, String deriv, String root) throws FileNotFoundException {
		
		// the class is a string for weka demands so
		int pos = deriv.indexOf(root.charAt(0)) + 1; // +1 because 0 is reserved for 'not found'  
		if (pos>4) pos=0;
		featVs[0]=featVs[0].replaceAll("\\n", ",pos"+pos+"\n");
		System.out.println("the replace turned out "+featVs[0].split("\\n")[0]);
		featVs[1]=featVs[1].replaceAll("\\n", ",pos"+locateLetter(root.charAt(1), deriv, 1)+"\n"); 
		featVs[2]=featVs[2].replaceAll("\\n", ",pos"+locateLetter(root.charAt(2), deriv, 2)+"\n"); 
		
		return featVs;
	}
	
	// insert the class column at the end of each feature vector
	private static String[] appendClassToFeatVs(String[] featVs, String[] derivs, String[] roots) throws FileNotFoundException {
		if(derivs.length != roots.length)
			System.out.println("Get out of here !!!");
		for(int i=0; i<derivs.length; i++) {
			String deriv = derivs[i];
			String root  = roots[i];
			String[] ss1 = featVs[0].split("\\n");
			int pos = deriv.indexOf(root.charAt(0)) + 1; // +1 because 0 is reserved for 'not found'  
			if (pos>4) pos=0;
			featVs[0]=featVs[0].replace("\\n", ",pos"+pos+"\n"); 
			System.out.println("the replace turned out "+featVs[0].split("\\n")[0]);
			featVs[1]=featVs[1].replaceAll("\\n", ",pos"+locateLetter(root.charAt(1), deriv, 1)+"\n"); 
			featVs[2]=featVs[2].replaceAll("\\n", ",pos"+locateLetter(root.charAt(2), deriv, 2)+"\n"); 
		}
		return featVs;
	}
	



	PrintWriter out1 = new PrintWriter(new File("feat1.csv"));
	PrintWriter out2 = new PrintWriter(new File("feat2.csv"));
	PrintWriter out3 = new PrintWriter(new File("feat3.csv"));
		out1.close();
		out2.close();
		out3.close();
		System.out.println("Feats Extrctd for training data");
